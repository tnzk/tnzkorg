{"en":{"title":"Making Web APIs Type-safe with Aspida","distro":"https://dev.to/tnzk/making-web-apis-type-safe-with-aspida-fkf","body":"<p>Types matter. Even with the naive type system of C/C++, I used to feel somehow protected.</p>\n<p>TypeScript enables for JavaScript libraries to provide their type definitions but Web APIs. Actually, majority of APIs lack precise documentation, let alone type definition.</p>\n<p><a href=\"https://github.com/aspidajs/aspida\">Aspida</a> fills this blind spot. Few HTTP client libraries on NPM provide this capability.</p>\n<p>In this article, I demonstrate how we can invoke Discourse API as an example in type-safe manner.</p>\n<h1>Setting up Aspida</h1>\n<p>You can setup Aspida according <a href=\"https://github.com/aspidajs/aspida\">the official README</a>.</p>\n<p>Since Aspida provides just an abstraction layer for type-safety, you need to chose one of HTTP client library as its back-end. Major libraries (<a href=\"https://github.com/aspidajs/aspida/tree/master/packages/aspida-axios\">axios</a>, <a href=\"https://github.com/aspidajs/aspida/tree/master/packages/aspida-ky\">ky</a>, <a href=\"https://github.com/aspidajs/aspida/tree/master/packages/aspida-fetch\">fetch</a> and <a href=\"https://github.com/aspidajs/aspida/tree/master/packages/aspida-node-fetch\">node-fetch</a>) seem to be supported.</p>\n<p>Here, I pick axios.</p>\n<h1>Overview of Discourse API</h1>\n<p>You may know that <a href=\"https://www.discourse.org/\">Discourse</a> is an open source discussion platform.</p>\n<p>I try accessing an instance of Discourse via its Web API and show the names of visible Categories in the forum for demonstration.</p>\n<p>Discourse API is a simple RESTful API, with <a href=\"https://docs.discourse.org/\">nice and sufficient documentation</a>. I'm not so fluent about the API, but it seems to cover almost all of its functionalities.</p>\n<p>Since <a href=\"https://ichiji.social/@tnzk\">I'm the Server Admin of a Mastodon server</a>, I chose <a href=\"https://discourse.joinmastodon.org/\">Mastodon Meta Discussion Board</a> for an example :)</p>\n<h1>Creating Type definition</h1>\n<p>First of all, we need the type definition.</p>\n<p>You can assign types for the response and request parameters of your favorite APIs with Aspida, by putting type definition files in <code>$REPO_ROOT/apis/</code> like:</p>\n<pre><code class=\"language-typescript\">export type CategoryList = {\n    can_create_category: boolean,\n    can_create_topic: boolean,\n    draft: boolean,\n    draft_key: string,\n    draft_sequence: number,\n    categories: Category[]\n}\n\nexport type Category = {\n    id: number,\n    name: string,\n    color: string,\n    text_color: string\n    slug: string,\n    topic_count: number,\n    post_count: number,\n    position: number,\n    description: string,\n    description_text: string,\n    topic_url: string,\n    logo_url: string,\n    background_url: string,\n    read_restricted: boolean,\n    permission: number,\n    notification_level: string,\n    can_edit: boolean,\n    topic_template: string,\n    has_children: boolean,\n    topics_day: number,\n    topics_week: number,\n    topics_month: number,\n    topics_year: number,\n    topics_all_time: number,\n    description_excerpt: string,\n}\n\nexport type Methods = {\n    get: {\n        resBody: {\n            category_list: CategoryList\n        },\n    }\n}\n</code></pre>\n<p>This time I put this as <code>categories.ts</code>.</p>\n<p>This is a hand-crafted type definition :tm: looking up <a href=\"https://docs.discourse.org/#tag/Categories\">the API documentation</a> :muscle:</p>\n<h1>Building the Type definition</h1>\n<p>Once you have created the type definition, you need to build before using in application:</p>\n<pre><code class=\"language-bash\">$ yarn run aspida --build\n</code></pre>\n<p>You may be happier by having this defined in <code>package.json</code>.</p>\n<h1>Invoking the API in Application</h1>\n<p>Now you can invoke the API in type-safe manner! You can write your application like below.</p>\n<pre><code class=\"language-javascript\">import dotenv from \"dotenv\"\nimport axios from \"axios\"\nimport aspida from \"@aspida/axios\"\nimport api from \"../apis/$api\"\nimport type { CategoryList } from \"../apis/categories\"\n\ndotenv.config()\n\nconst axiosConfig = {\n    timeout: 3000,\n    baseURL: 'https://discourse.joinmastodon.org',\n    headers: {\n        'Accept': 'application/json',\n//        'Api-Username': process.env.DISCOURSE_API_USERNAME,\n//        'Api-Key': process.env.DISCOURSE_API_KEY,\n    }\n}\n\nlet client = api(aspida(axios, axiosConfig))\n\n;(async () => {\n    client.categories.get()\n        .then(response => {\n            let category_list = response.data.category_list\n            category_list.categories.forEach(cat => console.log(cat.name))\n        })\n        .catch(error => console.log(error))\n})()\n</code></pre>\n<p>It seems you need to import types explicitly if you want enable code-completion.</p>\n<p>Also, you can pass Axios options at instantiation of Aspida. I had confirmed it worked well with headers for authentication.</p>\n<p>This results:</p>\n<pre><code class=\"language-bash\">$ yarn run start\nServer administration\nGeneral\nCore development\nApp development\nTranslation\nMeta feedback\nFeedback\nDone in 10.56s.\n</code></pre>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/jhg8u8v7ym1n90on6go2.png\" alt=\"\"></p>\n<p>Looks good :+1:</p>\n<p>You can see complete code at: https://github.com/tnzk/aspida-demo</p>\n<p>You're now embraced in type system, so you won't break a thing like:</p>\n<pre><code>category_list.categories.forEach(cat => console.log(cat.name * 1))\n</code></pre>\n<p>because this will be detected <strong>at compile time</strong>:</p>\n<pre><code>src/discourse-list-category.ts:25:65 - error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n\n25             category_list.categories.forEach(cat => console.log(cat.name * 1))\n</code></pre>\n<h1>Upnext</h1>\n<p>Aspida has another interesting functionality which automatically build type definitions from OpenAPI Specification.</p>\n<p>Since Discourse API provides it, we'll try this in next article :)</p>\n"}}